# This is a basic workflow to help you get started with Actions
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      # Configure AWS Credentials first (needed for zappa commands)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
            aws-region: us-east-1
      
      # Install python requirements
      - name: Install python requirements.txt
        run: |
          python -m venv env
          source env/bin/activate
          pip install pytest zappa
      
      # Execute python tests    
      - name: Execute python tests
        run: |
          source env/bin/activate
          pytest
      
  # Check if Zappa deployment exists
      - name: Check Zappa deployment status
        id: zappa_status
        run: |
          source env/bin/activate
          echo "Checking deployment status..."
          
          # Try zappa status command and capture both output and exit code
          if zappa status dev 2>&1 | grep -q "Status.*deployed\|Function.*exists\|deployed.*ago"; then
            echo "deployed=true" >> $GITHUB_OUTPUT
            echo "✅ Zappa deployment exists - will use UPDATE"
          else
            # Also check if we get the specific "not deployed" message
            if zappa status dev 2>&1 | grep -q "not.*deployed\|does not exist\|No Lambda function found"; then
              echo "deployed=false" >> $GITHUB_OUTPUT
              echo "❌ Zappa deployment does not exist - will use DEPLOY"
            else
              # If status command fails, try to deploy (safer fallback)
              echo "deployed=false" >> $GITHUB_OUTPUT
              echo "⚠️ Unable to determine status clearly - will try DEPLOY first"
            fi
          fi
        continue-on-error: true
        env:
          AWS_DEFAULT_REGION: us-east-1
      
      # Show what we detected
      - name: Show deployment decision
        run: |
          echo "Deployment status detected: ${{ steps.zappa_status.outputs.deployed }}"
          if [ "${{ steps.zappa_status.outputs.deployed }}" == "true" ]; then
            echo "Will run: zappa update dev"
          else
            echo "Will run: zappa deploy dev"
          fi
      
      # Deploy or Update based on status
      - name: Zappa Deploy or Update
        run: |
          source env/bin/activate
          
          if [ "${{ steps.zappa_status.outputs.deployed }}" == "true" ]; then
            echo "🔄 Updating existing deployment..."
            zappa update dev
          else
            echo "🚀 Creating new deployment..."
            # If deploy fails because already exists, try update instead
            if ! zappa deploy dev 2>&1; then
              echo "Deploy failed, trying update instead..."
              zappa update dev
            fi
          fi
        env:
          AWS_DEFAULT_REGION: us-east-1
      
      - name: List buckets
        run: aws s3 ls
        
      - name: Copy to S3
        run: aws s3 cp utils.py s3://prueba-checho1/