# This is a basic workflow to help you get started with Actions
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      # Configure AWS Credentials first (needed for zappa commands)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
            aws-region: us-east-1
      
      # Install python requirements
      - name: Install python requirements.txt
        run: |
          python -m venv env
          source env/bin/activate
          pip install pytest
      
      # Execute python tests    
      - name: Execute python tests
        run: |
          source env/bin/activate
          pytest
      
      # Check if Lambda function exists and set output
      - name: Check if Lambda function exists
        id: check_lambda
        run: |
          source env/bin/activate
          # Try to get function info, capture exit code
          if aws lambda get-function --function-name your-function-name-dev >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Lambda function exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Lambda function does not exist"
          fi
        continue-on-error: true
      
      # Deploy if function doesn't exist
      - name: Zappa Deploy
        if: steps.check_lambda.outputs.exists == 'false'
        run: |
          source env/bin/activate
          zappa deploy dev
      
      # Update if function exists
      - name: Zappa Update
        if: steps.check_lambda.outputs.exists == 'true'
        run: |
          source env/bin/activate
          zappa update dev
      
      # Alternative approach: Use zappa status command
      # - name: Check Zappa deployment status
      #   id: zappa_status
      #   run: |
      #     source env/bin/activate
      #     if zappa status dev >/dev/null 2>&1; then
      #       echo "deployed=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "deployed=false" >> $GITHUB_OUTPUT
      #     fi
      #   continue-on-error: true
      
      # - name: Zappa Deploy or Update
      #   run: |
      #     source env/bin/activate
      #     if [ "${{ steps.zappa_status.outputs.deployed }}" == "true" ]; then
      #       echo "Updating existing deployment..."
      #       zappa update dev
      #     else
      #       echo "Creating new deployment..."
      #       zappa deploy dev
      #     fi
      
      - name: List buckets
        run: aws s3 ls
        
      - name: Copy to S3
        run: aws s3 cp utils.py s3://prueba-checho1/